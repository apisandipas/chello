/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as BoardsImport } from './routes/boards'
import { Route as BoardImport } from './routes/board'
import { Route as AboutImport } from './routes/about'
import { Route as AdminRouteImport } from './routes/admin/route'
import { Route as IndexImport } from './routes/index'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as BoardBoardIdImport } from './routes/board/$boardId'
import { Route as AuthSignupImport } from './routes/auth/signup'
import { Route as AuthLogoutImport } from './routes/auth/logout'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as AuthForgotPasswordImport } from './routes/auth/forgot-password'
import { Route as AdminUsersImport } from './routes/admin/users'
import { Route as AdminTeamsImport } from './routes/admin/teams'
import { Route as AdminSupportImport } from './routes/admin/support'
import { Route as AdminAccountingImport } from './routes/admin/accounting'
import { Route as BoardBoardIdCardCardIdImport } from './routes/board/$boardId/card/$cardId'

// Create/Update Routes

const BoardsRoute = BoardsImport.update({
  id: '/boards',
  path: '/boards',
  getParentRoute: () => rootRoute,
} as any)

const BoardRoute = BoardImport.update({
  id: '/board',
  path: '/board',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const AdminRouteRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRouteRoute,
} as any)

const BoardBoardIdRoute = BoardBoardIdImport.update({
  id: '/$boardId',
  path: '/$boardId',
  getParentRoute: () => BoardRoute,
} as any)

const AuthSignupRoute = AuthSignupImport.update({
  id: '/auth/signup',
  path: '/auth/signup',
  getParentRoute: () => rootRoute,
} as any)

const AuthLogoutRoute = AuthLogoutImport.update({
  id: '/auth/logout',
  path: '/auth/logout',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthForgotPasswordRoute = AuthForgotPasswordImport.update({
  id: '/auth/forgot-password',
  path: '/auth/forgot-password',
  getParentRoute: () => rootRoute,
} as any)

const AdminUsersRoute = AdminUsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminTeamsRoute = AdminTeamsImport.update({
  id: '/teams',
  path: '/teams',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminSupportRoute = AdminSupportImport.update({
  id: '/support',
  path: '/support',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminAccountingRoute = AdminAccountingImport.update({
  id: '/accounting',
  path: '/accounting',
  getParentRoute: () => AdminRouteRoute,
} as any)

const BoardBoardIdCardCardIdRoute = BoardBoardIdCardCardIdImport.update({
  id: '/card/$cardId',
  path: '/card/$cardId',
  getParentRoute: () => BoardBoardIdRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/board': {
      id: '/board'
      path: '/board'
      fullPath: '/board'
      preLoaderRoute: typeof BoardImport
      parentRoute: typeof rootRoute
    }
    '/boards': {
      id: '/boards'
      path: '/boards'
      fullPath: '/boards'
      preLoaderRoute: typeof BoardsImport
      parentRoute: typeof rootRoute
    }
    '/admin/accounting': {
      id: '/admin/accounting'
      path: '/accounting'
      fullPath: '/admin/accounting'
      preLoaderRoute: typeof AdminAccountingImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/support': {
      id: '/admin/support'
      path: '/support'
      fullPath: '/admin/support'
      preLoaderRoute: typeof AdminSupportImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/teams': {
      id: '/admin/teams'
      path: '/teams'
      fullPath: '/admin/teams'
      preLoaderRoute: typeof AdminTeamsImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersImport
      parentRoute: typeof AdminRouteImport
    }
    '/auth/forgot-password': {
      id: '/auth/forgot-password'
      path: '/auth/forgot-password'
      fullPath: '/auth/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/logout': {
      id: '/auth/logout'
      path: '/auth/logout'
      fullPath: '/auth/logout'
      preLoaderRoute: typeof AuthLogoutImport
      parentRoute: typeof rootRoute
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/auth/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupImport
      parentRoute: typeof rootRoute
    }
    '/board/$boardId': {
      id: '/board/$boardId'
      path: '/$boardId'
      fullPath: '/board/$boardId'
      preLoaderRoute: typeof BoardBoardIdImport
      parentRoute: typeof BoardImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof AdminRouteImport
    }
    '/board/$boardId/card/$cardId': {
      id: '/board/$boardId/card/$cardId'
      path: '/card/$cardId'
      fullPath: '/board/$boardId/card/$cardId'
      preLoaderRoute: typeof BoardBoardIdCardCardIdImport
      parentRoute: typeof BoardBoardIdImport
    }
  }
}

// Create and export the route tree

interface AdminRouteRouteChildren {
  AdminAccountingRoute: typeof AdminAccountingRoute
  AdminSupportRoute: typeof AdminSupportRoute
  AdminTeamsRoute: typeof AdminTeamsRoute
  AdminUsersRoute: typeof AdminUsersRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminAccountingRoute: AdminAccountingRoute,
  AdminSupportRoute: AdminSupportRoute,
  AdminTeamsRoute: AdminTeamsRoute,
  AdminUsersRoute: AdminUsersRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

interface BoardBoardIdRouteChildren {
  BoardBoardIdCardCardIdRoute: typeof BoardBoardIdCardCardIdRoute
}

const BoardBoardIdRouteChildren: BoardBoardIdRouteChildren = {
  BoardBoardIdCardCardIdRoute: BoardBoardIdCardCardIdRoute,
}

const BoardBoardIdRouteWithChildren = BoardBoardIdRoute._addFileChildren(
  BoardBoardIdRouteChildren,
)

interface BoardRouteChildren {
  BoardBoardIdRoute: typeof BoardBoardIdRouteWithChildren
}

const BoardRouteChildren: BoardRouteChildren = {
  BoardBoardIdRoute: BoardBoardIdRouteWithChildren,
}

const BoardRouteWithChildren = BoardRoute._addFileChildren(BoardRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/board': typeof BoardRouteWithChildren
  '/boards': typeof BoardsRoute
  '/admin/accounting': typeof AdminAccountingRoute
  '/admin/support': typeof AdminSupportRoute
  '/admin/teams': typeof AdminTeamsRoute
  '/admin/users': typeof AdminUsersRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/logout': typeof AuthLogoutRoute
  '/auth/signup': typeof AuthSignupRoute
  '/board/$boardId': typeof BoardBoardIdRouteWithChildren
  '/admin/': typeof AdminIndexRoute
  '/board/$boardId/card/$cardId': typeof BoardBoardIdCardCardIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/board': typeof BoardRouteWithChildren
  '/boards': typeof BoardsRoute
  '/admin/accounting': typeof AdminAccountingRoute
  '/admin/support': typeof AdminSupportRoute
  '/admin/teams': typeof AdminTeamsRoute
  '/admin/users': typeof AdminUsersRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/logout': typeof AuthLogoutRoute
  '/auth/signup': typeof AuthSignupRoute
  '/board/$boardId': typeof BoardBoardIdRouteWithChildren
  '/admin': typeof AdminIndexRoute
  '/board/$boardId/card/$cardId': typeof BoardBoardIdCardCardIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/board': typeof BoardRouteWithChildren
  '/boards': typeof BoardsRoute
  '/admin/accounting': typeof AdminAccountingRoute
  '/admin/support': typeof AdminSupportRoute
  '/admin/teams': typeof AdminTeamsRoute
  '/admin/users': typeof AdminUsersRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/logout': typeof AuthLogoutRoute
  '/auth/signup': typeof AuthSignupRoute
  '/board/$boardId': typeof BoardBoardIdRouteWithChildren
  '/admin/': typeof AdminIndexRoute
  '/board/$boardId/card/$cardId': typeof BoardBoardIdCardCardIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/about'
    | '/board'
    | '/boards'
    | '/admin/accounting'
    | '/admin/support'
    | '/admin/teams'
    | '/admin/users'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/logout'
    | '/auth/signup'
    | '/board/$boardId'
    | '/admin/'
    | '/board/$boardId/card/$cardId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/board'
    | '/boards'
    | '/admin/accounting'
    | '/admin/support'
    | '/admin/teams'
    | '/admin/users'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/logout'
    | '/auth/signup'
    | '/board/$boardId'
    | '/admin'
    | '/board/$boardId/card/$cardId'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/about'
    | '/board'
    | '/boards'
    | '/admin/accounting'
    | '/admin/support'
    | '/admin/teams'
    | '/admin/users'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/logout'
    | '/auth/signup'
    | '/board/$boardId'
    | '/admin/'
    | '/board/$boardId/card/$cardId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
  BoardRoute: typeof BoardRouteWithChildren
  BoardsRoute: typeof BoardsRoute
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthLogoutRoute: typeof AuthLogoutRoute
  AuthSignupRoute: typeof AuthSignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  BoardRoute: BoardRouteWithChildren,
  BoardsRoute: BoardsRoute,
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthLogoutRoute: AuthLogoutRoute,
  AuthSignupRoute: AuthSignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/about",
        "/board",
        "/boards",
        "/auth/forgot-password",
        "/auth/login",
        "/auth/logout",
        "/auth/signup"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin/route.tsx",
      "children": [
        "/admin/accounting",
        "/admin/support",
        "/admin/teams",
        "/admin/users",
        "/admin/"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/board": {
      "filePath": "board.tsx",
      "children": [
        "/board/$boardId"
      ]
    },
    "/boards": {
      "filePath": "boards.tsx"
    },
    "/admin/accounting": {
      "filePath": "admin/accounting.tsx",
      "parent": "/admin"
    },
    "/admin/support": {
      "filePath": "admin/support.tsx",
      "parent": "/admin"
    },
    "/admin/teams": {
      "filePath": "admin/teams.tsx",
      "parent": "/admin"
    },
    "/admin/users": {
      "filePath": "admin/users.tsx",
      "parent": "/admin"
    },
    "/auth/forgot-password": {
      "filePath": "auth/forgot-password.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/auth/logout": {
      "filePath": "auth/logout.tsx"
    },
    "/auth/signup": {
      "filePath": "auth/signup.tsx"
    },
    "/board/$boardId": {
      "filePath": "board/$boardId.tsx",
      "parent": "/board",
      "children": [
        "/board/$boardId/card/$cardId"
      ]
    },
    "/admin/": {
      "filePath": "admin/index.tsx",
      "parent": "/admin"
    },
    "/board/$boardId/card/$cardId": {
      "filePath": "board/$boardId/card/$cardId.tsx",
      "parent": "/board/$boardId"
    }
  }
}
ROUTE_MANIFEST_END */
